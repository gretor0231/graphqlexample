package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"awesomeProject/graph/model"
	"context"
	"encoding/json"
	"net/http"
)

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", "http://localhost:3000/books", nil)
	if err != nil {
		return nil, err
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var books []*model.Book

	err = json.NewDecoder(resp.Body).Decode(&books)
	if err != nil {
		return nil, err
	}

	return books, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
